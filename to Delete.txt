{/* Dialog for Adding and Editing Shifts */}
       <Dialog open={isOpen} onOpenChange={setIsOpen}>
        <DialogContent className="p-6 bg-gray-100 rounded-lg">
          <DialogHeader>
            <DialogTitle className="text-xl font-semibold">{isEditing ? "Edit Current Shift" : "Add New Shift"}</DialogTitle>
          </DialogHeader>
          <form onSubmit={(e) => { 
            e.preventDefault();
            if (isEditing) {
              updateShift();
            } else {
              addShift();
            }
          }} className="grid grid-cols-1 md:grid-cols-2 gap-4">
          {/* First row with single column */}
          <div className="md:col-span-2">
            <Label htmlFor="name">Shift Name</Label>
            <Input
              id="name"
              name="name"
              value={newShift.name}
              onChange={handleInputChange}
              placeholder="e.g., Morning Shift"
              required
            />
          </div>

          {/* Second row with two columns */}
          <div>
            <Label htmlFor="startTime">Start Time</Label>
            <Input
              id="startTime"
              name="startTime"
              type="time"
              value={newShift.startTime}
              onChange={handleInputChange}
              required
            />
          </div>
          <div>
            <Label htmlFor="endTime">End Time</Label>
            <Input
              id="endTime"
              name="endTime"
              type="time"
              value={newShift.endTime}
              onChange={handleInputChange}
              required
            />
          </div>

          {/* Next rows */}
          <div>
            <Label htmlFor="lateMultiplier">Late Multiplier</Label>
            <Input
              id="lateMultiplier"
              name="lateMultiplier"
              type="number"
              value={newShift.lateMultiplier}
              onChange={handleInputChange}
              required
            />
          </div>
          <div>
            <Label htmlFor="extraMultiplier">Extra Multiplier</Label>
            <Input
              id="extraMultiplier"
              name="extraMultiplier"
              type="number"
              value={newShift.extraMultiplier}
              onChange={handleInputChange}
              required
            />
          </div>
          <div>
            <Label htmlFor="lateLimit">Late Limit</Label>
            <Input
              id="lateLimit"
              name="lateLimit"
              type="number"
              value={newShift.lateLimit}
              onChange={handleInputChange}
              required
            />
          </div>
          <div>
            <Label htmlFor="extraLimit">Extra Threshold</Label>
            <Input
              id="extraLimit"
              name="extraLimit"
              type="number"
              value={newShift.extraLimit}
              onChange={handleInputChange}
              required
            />
          </div>

          <fieldset className="mt-4 md:col-span-2">
            <legend className="text-sm font-medium text-gray-700">Days of Week</legend>
            <div className="mt-2 flex flex-wrap gap-2">
              {daysOfWeek.map((day) => (
                <Button
                  key={day}
                  type="button"
                  variant={newShift.days.includes(day) ? "default" : "outline"}
                  onClick={() => handleDayToggle(day)}
                >
                  {day.slice(0, 3)}
                </Button>
              ))}
            </div>
          </fieldset>

          {/* Breaks Section */}
            <fieldset className="mt-4 md:col-span-2">
              <legend className="text-sm font-medium text-gray-700">Breaks</legend>
              <div className="mt-2 space-y-2">
          {newShift.breaks?.map((breakItem, index) => (
            <div key={breakItem.id} className="flex items-center gap-2">
           

           <Input
              id="name"
              name="name"
              value={breakItem.name}
              onChange={(event) => handleNameBreakChange(event, String(index))} // Wrap in arrow function
              placeholder="Break Name"
            />
            {/* {errorName && <p className="text-red-500 text-sm">{errorName}</p>} */}
              <Input
                type="number"
                value={breakItem.duration}
                onChange={(e) => {
                  const updatedBreaks = [...newShift.breaks!];
                  updatedBreaks[index].duration = parseInt(e.target.value, 10);
                  setNewShift({ ...newShift, breaks: updatedBreaks });
                }}
                placeholder="Duration (minutes)"
              />
                    <Select
                      value={breakItem.icon}
                      onValueChange={(value) => {
                        const updatedBreaks = [...newShift.breaks!];
                        updatedBreaks[index].icon = value;
                        setNewShift({ ...newShift, breaks: updatedBreaks });
                      }}
                    >
                      <SelectTrigger className="w-[120px]">
                        <SelectValue placeholder="Select icon" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="coffee">‚òï Coffee</SelectItem>
                        <SelectItem value="food">üç¥ Food</SelectItem>
                        <SelectItem value="tea">üçµ Tea</SelectItem>
                        <SelectItem value="rest">üõãÔ∏è Rest</SelectItem>
                      </SelectContent>
                    </Select>
                    <Button
                      variant="destructive"
                      size="sm"
                      onClick={async () => {
                        const breakId = newShift.breaks![index].id;
                    
                        // Call the API to delete the break
                        const isDeleted = await deleteBreak(breakId);
                    
                        // If the break was successfully deleted from the backend, update the local state
                        if (isDeleted) {
                          const updatedBreaks = newShift.breaks!.filter((_, i) => i !== index);
                          setNewShift({ ...newShift, breaks: updatedBreaks });
                    
                          toast.success('Break deleted successfully', {
                            autoClose: 1500, // duration in milliseconds
                          });
                        }
                      }}
                    >
                      <Trash2 className="h-4 w-4" />
                    </Button>
                  </div>
                ))}
                <Button
                    type="button"
                    variant="outline"
                    onClick={() => {
                      setNewShift({
                        ...newShift,
                        breaks: [...(newShift.breaks || []), {
                          id: `temp-${Date.now()}`,
                          name: '', 
                          duration: 0 
                        }],
                      });
                    }}
                  >
                    <PlusCircle className="mr-2 h-4 w-4" />
                    Add Break
                  </Button>
                </div>
              </fieldset>

          <DialogFooter className="mt-6 md:col-span-2">
            <Button type="button" variant="secondary" onClick={() => setIsOpen(false)} className="mr-4">
              Cancel
            </Button>

            {isEditing ? (
              <Button type="submit">
                <SaveIcon className="mr-2 h-4 w-4" />
                Save Changes
              </Button>
            ) : (
              <div>
                <Button type="submit">
                  <PlusCircle className="mr-2 h-4 w-4" />
                  Add Shift
                </Button>
              </div>
            )}
          </DialogFooter>
        </form>

      </DialogContent>
      </Dialog>